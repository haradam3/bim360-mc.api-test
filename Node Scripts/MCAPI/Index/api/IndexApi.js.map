{"version":3,"sources":["../../node_modules/@adsk/bim360-nucleus-index/src/api/IndexApi.js"],"names":["IndexApi","apiClient","ApiClient","instance","containerId","modelSetId","jobId","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","IndexJob","callApi","getModelSetJobWithHttpInfo","then","response_and_data","data","version","opts","queryModelSetVersionIndexWithHttpInfo","IndexResource","queryModelSetVersionIndexFieldsWithHttpInfo","IndexManifest","queryModelSetVersionIndexManifestWithHttpInfo","viewId","queryModelSetVersionIndexViewWithHttpInfo"],"mappings":"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","file":"IndexApi.js","sourcesContent":["/**\n * Nucleus Model Set Index API\n * BIM 360 Indexing Service\n *\n * OpenAPI spec version: 1.2.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport BasicError from '../model/BasicError';\nimport IndexJob from '../model/IndexJob';\nimport IndexManifest from '../model/IndexManifest';\nimport IndexQuery from '../model/IndexQuery';\nimport IndexResource from '../model/IndexResource';\n\n/**\n* Index service.\n* @module api/IndexApi\n* @version 1.2.0\n*/\nexport default class IndexApi {\n\n    /**\n    * Constructs a new IndexApi. \n    * @alias module:api/IndexApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Get model set index job\n     * Get model set index job\n     * @param {String} containerId Container Id\n     * @param {String} modelSetId The model set.\n     * @param {String} jobId Transaciton Id\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexJob} and HTTP response\n     */\n    getModelSetJobWithHttpInfo(containerId, modelSetId, jobId) {\n      let postBody = null;\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling getModelSetJob\");\n      }\n\n      // verify the required parameter 'modelSetId' is set\n      if (modelSetId === undefined || modelSetId === null) {\n        throw new Error(\"Missing the required parameter 'modelSetId' when calling getModelSetJob\");\n      }\n\n      // verify the required parameter 'jobId' is set\n      if (jobId === undefined || jobId === null) {\n        throw new Error(\"Missing the required parameter 'jobId' when calling getModelSetJob\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId,\n        'modelSetId': modelSetId,\n        'jobId': jobId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = IndexJob;\n\n      return this.apiClient.callApi(\n        '/v1/containers/{containerId}/modelsets/{modelSetId}/jobs/{jobId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get model set index job\n     * Get model set index job\n     * @param {String} containerId Container Id\n     * @param {String} modelSetId The model set.\n     * @param {String} jobId Transaciton Id\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IndexJob}\n     */\n    getModelSetJob(containerId, modelSetId, jobId) {\n      return this.getModelSetJobWithHttpInfo(containerId, modelSetId, jobId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Query an index\n     * Query model set version index\n     * @param {String} containerId The container.\n     * @param {String} modelSetId The model set.\n     * @param {Number} version The version.\n     * @param {Object} opts Optional parameters\n     * @param {module:model/IndexQuery} opts.indexQuery \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexJob} and HTTP response\n     */\n    queryModelSetVersionIndexWithHttpInfo(containerId, modelSetId, version, opts) {\n      opts = opts || {};\n      let postBody = opts['indexQuery'];\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling queryModelSetVersionIndex\");\n      }\n\n      // verify the required parameter 'modelSetId' is set\n      if (modelSetId === undefined || modelSetId === null) {\n        throw new Error(\"Missing the required parameter 'modelSetId' when calling queryModelSetVersionIndex\");\n      }\n\n      // verify the required parameter 'version' is set\n      if (version === undefined || version === null) {\n        throw new Error(\"Missing the required parameter 'version' when calling queryModelSetVersionIndex\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId,\n        'modelSetId': modelSetId,\n        'version': version\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = IndexJob;\n\n      return this.apiClient.callApi(\n        '/v1/containers/{containerId}/modelsets/{modelSetId}/versions/{version}/indexes:query', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Query an index\n     * Query model set version index\n     * @param {String} containerId The container.\n     * @param {String} modelSetId The model set.\n     * @param {Number} version The version.\n     * @param {Object} opts Optional parameters\n     * @param {module:model/IndexQuery} opts.indexQuery \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IndexJob}\n     */\n    queryModelSetVersionIndex(containerId, modelSetId, version, opts) {\n      return this.queryModelSetVersionIndexWithHttpInfo(containerId, modelSetId, version, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Query index fields\n     * Query model set version index fields\n     * @param {String} containerId The container.\n     * @param {String} modelSetId The model set.\n     * @param {Number} version The version.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexResource} and HTTP response\n     */\n    queryModelSetVersionIndexFieldsWithHttpInfo(containerId, modelSetId, version) {\n      let postBody = null;\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling queryModelSetVersionIndexFields\");\n      }\n\n      // verify the required parameter 'modelSetId' is set\n      if (modelSetId === undefined || modelSetId === null) {\n        throw new Error(\"Missing the required parameter 'modelSetId' when calling queryModelSetVersionIndexFields\");\n      }\n\n      // verify the required parameter 'version' is set\n      if (version === undefined || version === null) {\n        throw new Error(\"Missing the required parameter 'version' when calling queryModelSetVersionIndexFields\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId,\n        'modelSetId': modelSetId,\n        'version': version\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = IndexResource;\n\n      return this.apiClient.callApi(\n        '/v1/containers/{containerId}/modelsets/{modelSetId}/versions/{version}/fields', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Query index fields\n     * Query model set version index fields\n     * @param {String} containerId The container.\n     * @param {String} modelSetId The model set.\n     * @param {Number} version The version.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IndexResource}\n     */\n    queryModelSetVersionIndexFields(containerId, modelSetId, version) {\n      return this.queryModelSetVersionIndexFieldsWithHttpInfo(containerId, modelSetId, version)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Query index manifest\n     * Query model set version index manifest\n     * @param {String} containerId The container.\n     * @param {String} modelSetId The model set.\n     * @param {Number} version The version.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexManifest} and HTTP response\n     */\n    queryModelSetVersionIndexManifestWithHttpInfo(containerId, modelSetId, version) {\n      let postBody = null;\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling queryModelSetVersionIndexManifest\");\n      }\n\n      // verify the required parameter 'modelSetId' is set\n      if (modelSetId === undefined || modelSetId === null) {\n        throw new Error(\"Missing the required parameter 'modelSetId' when calling queryModelSetVersionIndexManifest\");\n      }\n\n      // verify the required parameter 'version' is set\n      if (version === undefined || version === null) {\n        throw new Error(\"Missing the required parameter 'version' when calling queryModelSetVersionIndexManifest\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId,\n        'modelSetId': modelSetId,\n        'version': version\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = IndexManifest;\n\n      return this.apiClient.callApi(\n        '/v1/containers/{containerId}/modelsets/{modelSetId}/versions/{version}/manifest', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Query index manifest\n     * Query model set version index manifest\n     * @param {String} containerId The container.\n     * @param {String} modelSetId The model set.\n     * @param {Number} version The version.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IndexManifest}\n     */\n    queryModelSetVersionIndexManifest(containerId, modelSetId, version) {\n      return this.queryModelSetVersionIndexManifestWithHttpInfo(containerId, modelSetId, version)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Query a model set version index using a view\n     * Query model set version index using a pre-defined view\n     * @param {String} containerId The container.\n     * @param {String} modelSetId The model set.\n     * @param {Number} version The version.\n     * @param {String} viewId The view.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexJob} and HTTP response\n     */\n    queryModelSetVersionIndexViewWithHttpInfo(containerId, modelSetId, version, viewId) {\n      let postBody = null;\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling queryModelSetVersionIndexView\");\n      }\n\n      // verify the required parameter 'modelSetId' is set\n      if (modelSetId === undefined || modelSetId === null) {\n        throw new Error(\"Missing the required parameter 'modelSetId' when calling queryModelSetVersionIndexView\");\n      }\n\n      // verify the required parameter 'version' is set\n      if (version === undefined || version === null) {\n        throw new Error(\"Missing the required parameter 'version' when calling queryModelSetVersionIndexView\");\n      }\n\n      // verify the required parameter 'viewId' is set\n      if (viewId === undefined || viewId === null) {\n        throw new Error(\"Missing the required parameter 'viewId' when calling queryModelSetVersionIndexView\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId,\n        'modelSetId': modelSetId,\n        'version': version,\n        'viewId': viewId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = IndexJob;\n\n      return this.apiClient.callApi(\n        '/v1/containers/{containerId}/modelsets/{modelSetId}/versions/{version}/views/{viewId}', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Query a model set version index using a view\n     * Query model set version index using a pre-defined view\n     * @param {String} containerId The container.\n     * @param {String} modelSetId The model set.\n     * @param {Number} version The version.\n     * @param {String} viewId The view.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IndexJob}\n     */\n    queryModelSetVersionIndexView(containerId, modelSetId, version, viewId) {\n      return this.queryModelSetVersionIndexViewWithHttpInfo(containerId, modelSetId, version, viewId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"]}