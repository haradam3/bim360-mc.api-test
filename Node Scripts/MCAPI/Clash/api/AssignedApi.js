'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
lash Service
o description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

penAPI spec version: 3.3.12


his class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
o not edit the class manually.



var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _AssignedClashGroupClashData = require('../model/AssignedClashGroupClashData');

var _AssignedClashGroupClashData2 = _interopRequireDefault(_AssignedClashGroupClashData);

var _AssignedClashGroupCollection = require('../model/AssignedClashGroupCollection');

var _AssignedClashGroupCollection2 = _interopRequireDefault(_AssignedClashGroupCollection);

var _ClashGroupClashIntersectionCollection = require('../model/ClashGroupClashIntersectionCollection');

var _ClashGroupClashIntersectionCollection2 = _interopRequireDefault(_ClashGroupClashIntersectionCollection);

var _ClashGroupJob = require('../model/ClashGroupJob');

var _ClashGroupJob2 = _interopRequireDefault(_ClashGroupJob);

var _NewAssignedClashGroup = require('../model/NewAssignedClashGroup');

var _NewAssignedClashGroup2 = _interopRequireDefault(_NewAssignedClashGroup);

var _ResourceError = require('../model/ResourceError');

var _ResourceError2 = _interopRequireDefault(_ResourceError);

var _SortDirection = require('../model/SortDirection');

var _SortDirection2 = _interopRequireDefault(_SortDirection);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Assigned service.
* @module api/AssignedApi
* @version 3.3.12
*/
var AssignedApi = function () {

  /**
  * Constructs a new AssignedApi. 
  * @alias module:api/AssignedApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function AssignedApi(apiClient) {
    _classCallCheck(this, AssignedApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * Assign clash groups to issues in batch
   * Clash groups which need resolving vial a design change are stored as assigned clash groups. In addition a BIM 360 issue is created and associated with the assigned clash group.
   * @param {String} containerId Container ID.
   * @param {String} testId Clash Test Id.
   * @param {Object} opts Optional parameters
   * @param {Array.<NewAssignedClashGroup>} opts.newAssignedClashGroup 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClashGroupJob} and HTTP response
   */


  _createClass(AssignedApi, [{
    key: 'addAssignedClashGroupBatchWithHttpInfo',
    value: function addAssignedClashGroupBatchWithHttpInfo(containerId, testId, opts) {
      opts = opts || {};
      var postBody = opts['newAssignedClashGroup'];

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling addAssignedClashGroupBatch");
      }

      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling addAssignedClashGroupBatch");
      }

      var pathParams = {
        'containerId': containerId,
        'testId': testId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth2AuthCode'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ClashGroupJob2.default;

      return this.apiClient.callApi('/v3/containers/{containerId}/tests/{testId}/clashes:assign', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Assign clash groups to issues in batch
     * Clash groups which need resolving vial a design change are stored as assigned clash groups. In addition a BIM 360 issue is created and associated with the assigned clash group.
     * @param {String} containerId Container ID.
     * @param {String} testId Clash Test Id.
     * @param {Object} opts Optional parameters
     * @param {Array.<NewAssignedClashGroup>} opts.newAssignedClashGroup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClashGroupJob}
     */

  }, {
    key: 'addAssignedClashGroupBatch',
    value: function addAssignedClashGroupBatch(containerId, testId, opts) {
      return this.addAssignedClashGroupBatchWithHttpInfo(containerId, testId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get assigned clash group clash detail (results) batch
     * This methods intersects the clash groups passed in the body of this method with the clash resources stored for the clash test. This method provides a mechanism for obtaining a sub set of the clash test results for a specific sub-set of clash groups associated with the test. This method can accept either a list of assigned clash group IDs or a list of BIM 360 Issue service Issue GUIDs. To retrieve results by BIM  360 Issue GUID pass issues&#x3D;true in the query string.
     * @param {String} containerId Container ID.
     * @param {String} testId Clash Test ID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.issues Query by Issue ID if set to true.
     * @param {Array.<String>} opts.requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AssignedClashGroupClashData>} and HTTP response
     */

  }, {
    key: 'getAssignedClashGroupBatchWithHttpInfo',
    value: function getAssignedClashGroupBatchWithHttpInfo(containerId, testId, opts) {
      opts = opts || {};
      var postBody = opts['requestBody'];

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling getAssignedClashGroupBatch");
      }

      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling getAssignedClashGroupBatch");
      }

      var pathParams = {
        'containerId': containerId,
        'testId': testId
      };
      var queryParams = {
        'issues': opts['issues']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth2AuthCode'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [_AssignedClashGroupClashData2.default];

      return this.apiClient.callApi('/v3/containers/{containerId}/tests/{testId}/clashes/assigned', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get assigned clash group clash detail (results) batch
     * This methods intersects the clash groups passed in the body of this method with the clash resources stored for the clash test. This method provides a mechanism for obtaining a sub set of the clash test results for a specific sub-set of clash groups associated with the test. This method can accept either a list of assigned clash group IDs or a list of BIM 360 Issue service Issue GUIDs. To retrieve results by BIM  360 Issue GUID pass issues&#x3D;true in the query string.
     * @param {String} containerId Container ID.
     * @param {String} testId Clash Test ID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.issues Query by Issue ID if set to true.
     * @param {Array.<String>} opts.requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AssignedClashGroupClashData>}
     */

  }, {
    key: 'getAssignedClashGroupBatch',
    value: function getAssignedClashGroupBatch(containerId, testId, opts) {
      return this.getAssignedClashGroupBatchWithHttpInfo(containerId, testId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get Clash Group Job
     * Get current state of job.
     * @param {String} containerId Container ID.
     * @param {String} jobId Job ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClashGroupJob} and HTTP response
     */

  }, {
    key: 'getClashGroupJobWithHttpInfo',
    value: function getClashGroupJobWithHttpInfo(containerId, jobId) {
      var postBody = null;

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling getClashGroupJob");
      }

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getClashGroupJob");
      }

      var pathParams = {
        'containerId': containerId,
        'jobId': jobId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth2AuthCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ClashGroupJob2.default;

      return this.apiClient.callApi('/v3/containers/{containerId}/clashes/jobs/{jobId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get Clash Group Job
     * Get current state of job.
     * @param {String} containerId Container ID.
     * @param {String} jobId Job ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClashGroupJob}
     */

  }, {
    key: 'getClashGroupJob',
    value: function getClashGroupJob(containerId, jobId) {
      return this.getClashGroupJobWithHttpInfo(containerId, jobId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get assigned clash group state relative to specified test
     * This endpoint intersects the assigned clash groups stored in the system with the results of the clash test specified in the path. Clashes which were present when the clash group was first defined may now be resolved.
     * @param {String} containerId Container ID.
     * @param {String} testId Clash Test ID.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageLimit Page size.
     * @param {String} opts.continuationToken Paging continuation token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClashGroupClashIntersectionCollection} and HTTP response
     */

  }, {
    key: 'getClashTestAssignedClashGroupIntersectionWithHttpInfo',
    value: function getClashTestAssignedClashGroupIntersectionWithHttpInfo(containerId, testId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling getClashTestAssignedClashGroupIntersection");
      }

      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling getClashTestAssignedClashGroupIntersection");
      }

      var pathParams = {
        'containerId': containerId,
        'testId': testId
      };
      var queryParams = {
        'pageLimit': opts['pageLimit'],
        'continuationToken': opts['continuationToken']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth2AuthCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ClashGroupClashIntersectionCollection2.default;

      return this.apiClient.callApi('/v3/containers/{containerId}/tests/{testId}/clashes/assigned', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get assigned clash group state relative to specified test
     * This endpoint intersects the assigned clash groups stored in the system with the results of the clash test specified in the path. Clashes which were present when the clash group was first defined may now be resolved.
     * @param {String} containerId Container ID.
     * @param {String} testId Clash Test ID.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageLimit Page size.
     * @param {String} opts.continuationToken Paging continuation token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClashGroupClashIntersectionCollection}
     */

  }, {
    key: 'getClashTestAssignedClashGroupIntersection',
    value: function getClashTestAssignedClashGroupIntersection(containerId, testId, opts) {
      return this.getClashTestAssignedClashGroupIntersectionWithHttpInfo(containerId, testId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Search assigned clash groups in model set
     * Search all the assigned clash groups in the given model set.
     * @param {String} containerId Container ID.
     * @param {String} modelSetId Model Set ID.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageLimit Page size.
     * @param {String} opts.continuationToken Paging continuation token.
     * @param {String} opts.clashTestId Filter by Clash Test ID.
     * @param {String} opts.issueId Filter by BIM 360 Issue ID.
     * @param {String} opts.createdBy Filter by Created by
     * @param {String} opts.after Filter by Created after
     * @param {String} opts.before Filter by Created before, default UTC now
     * @param {module:model/SortDirection} opts.sort Defines a sort direction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssignedClashGroupCollection} and HTTP response
     */

  }, {
    key: 'searchContainerIssueClashGroupsWithHttpInfo',
    value: function searchContainerIssueClashGroupsWithHttpInfo(containerId, modelSetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling searchContainerIssueClashGroups");
      }

      // verify the required parameter 'modelSetId' is set
      if (modelSetId === undefined || modelSetId === null) {
        throw new Error("Missing the required parameter 'modelSetId' when calling searchContainerIssueClashGroups");
      }

      var pathParams = {
        'containerId': containerId,
        'modelSetId': modelSetId
      };
      var queryParams = {
        'pageLimit': opts['pageLimit'],
        'continuationToken': opts['continuationToken'],
        'clashTestId': opts['clashTestId'],
        'issueId': opts['issueId'],
        'createdBy': opts['createdBy'],
        'after': opts['after'],
        'before': opts['before'],
        'sort': opts['sort']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth2AuthCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _AssignedClashGroupCollection2.default;

      return this.apiClient.callApi('/v3/containers/{containerId}/modelsets/{modelSetId}/clashes/assigned', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Search assigned clash groups in model set
     * Search all the assigned clash groups in the given model set.
     * @param {String} containerId Container ID.
     * @param {String} modelSetId Model Set ID.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageLimit Page size.
     * @param {String} opts.continuationToken Paging continuation token.
     * @param {String} opts.clashTestId Filter by Clash Test ID.
     * @param {String} opts.issueId Filter by BIM 360 Issue ID.
     * @param {String} opts.createdBy Filter by Created by
     * @param {String} opts.after Filter by Created after
     * @param {String} opts.before Filter by Created before, default UTC now
     * @param {module:model/SortDirection} opts.sort Defines a sort direction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssignedClashGroupCollection}
     */

  }, {
    key: 'searchContainerIssueClashGroups',
    value: function searchContainerIssueClashGroups(containerId, modelSetId, opts) {
      return this.searchContainerIssueClashGroupsWithHttpInfo(containerId, modelSetId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return AssignedApi;
}();

exports.default = AssignedApi;
//# sourceMappingURL=AssignedApi.js.map