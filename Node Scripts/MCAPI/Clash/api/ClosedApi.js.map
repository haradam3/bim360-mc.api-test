{"version":3,"sources":["../../node_modules/@adsk/bim360-nucleus-clash/src/api/ClosedApi.js"],"names":["ClosedApi","apiClient","ApiClient","instance","containerId","testId","opts","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","ClashGroupJob","callApi","addClosedClashGroupBatchWithHttpInfo","then","response_and_data","data","jobId","getClashGroupJobWithHttpInfo","ClashGroupClashIntersectionCollection","getClashTestClosedClashGroupIntersectionWithHttpInfo","ClosedClashGroupClashData","getClosedClashGroupDataBatchWithHttpInfo","modelSetId","reopenClosedClashGroupBatchWithHttpInfo","ClosedClashGroupCollection","searchContainerModelSetClosedClashGroupsWithHttpInfo"],"mappings":"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","file":"ClosedApi.js","sourcesContent":["/**\n * Clash Service\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 3.3.12\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport ClashGroupClashIntersectionCollection from '../model/ClashGroupClashIntersectionCollection';\nimport ClashGroupJob from '../model/ClashGroupJob';\nimport ClosedClashGroupClashData from '../model/ClosedClashGroupClashData';\nimport ClosedClashGroupCollection from '../model/ClosedClashGroupCollection';\nimport NewClosedClashGroup from '../model/NewClosedClashGroup';\nimport ResourceError from '../model/ResourceError';\nimport SortDirection from '../model/SortDirection';\n\n/**\n* Closed service.\n* @module api/ClosedApi\n* @version 3.3.12\n*/\nexport default class ClosedApi {\n\n    /**\n    * Constructs a new ClosedApi. \n    * @alias module:api/ClosedApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Add closed clash group in batch\n     * Clash groups which are closed will not be presented should they occur in subsequent clash tests. The clash will still be present in the model however it is not deemed necessary to remove it.\n     * @param {String} containerId Container ID.\n     * @param {String} testId Clash Test Id.\n     * @param {Object} opts Optional parameters\n     * @param {Array.<NewClosedClashGroup>} opts.newClosedClashGroup \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClashGroupJob} and HTTP response\n     */\n    addClosedClashGroupBatchWithHttpInfo(containerId, testId, opts) {\n      opts = opts || {};\n      let postBody = opts['newClosedClashGroup'];\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling addClosedClashGroupBatch\");\n      }\n\n      // verify the required parameter 'testId' is set\n      if (testId === undefined || testId === null) {\n        throw new Error(\"Missing the required parameter 'testId' when calling addClosedClashGroupBatch\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId,\n        'testId': testId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['oauth2AuthCode'];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = ClashGroupJob;\n\n      return this.apiClient.callApi(\n        '/v3/containers/{containerId}/tests/{testId}/clashes:close', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Add closed clash group in batch\n     * Clash groups which are closed will not be presented should they occur in subsequent clash tests. The clash will still be present in the model however it is not deemed necessary to remove it.\n     * @param {String} containerId Container ID.\n     * @param {String} testId Clash Test Id.\n     * @param {Object} opts Optional parameters\n     * @param {Array.<NewClosedClashGroup>} opts.newClosedClashGroup \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClashGroupJob}\n     */\n    addClosedClashGroupBatch(containerId, testId, opts) {\n      return this.addClosedClashGroupBatchWithHttpInfo(containerId, testId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get Clash Group Job\n     * Get current state of job.\n     * @param {String} containerId Container ID.\n     * @param {String} jobId Job ID.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClashGroupJob} and HTTP response\n     */\n    getClashGroupJobWithHttpInfo(containerId, jobId) {\n      let postBody = null;\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling getClashGroupJob\");\n      }\n\n      // verify the required parameter 'jobId' is set\n      if (jobId === undefined || jobId === null) {\n        throw new Error(\"Missing the required parameter 'jobId' when calling getClashGroupJob\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId,\n        'jobId': jobId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['oauth2AuthCode'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = ClashGroupJob;\n\n      return this.apiClient.callApi(\n        '/v3/containers/{containerId}/clashes/jobs/{jobId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get Clash Group Job\n     * Get current state of job.\n     * @param {String} containerId Container ID.\n     * @param {String} jobId Job ID.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClashGroupJob}\n     */\n    getClashGroupJob(containerId, jobId) {\n      return this.getClashGroupJobWithHttpInfo(containerId, jobId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get closed clash group state relative to specified test\n     * This endpoint intersects the closed clash groups stored in the system with the results of the clash test specified in the path. Clashes which were present when the clash group was first defined may now be resolved.\n     * @param {String} containerId Container ID.\n     * @param {String} testId Clash Test ID.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageLimit Page Size.\n     * @param {String} opts.continuationToken Paging continuation token.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClashGroupClashIntersectionCollection} and HTTP response\n     */\n    getClashTestClosedClashGroupIntersectionWithHttpInfo(containerId, testId, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling getClashTestClosedClashGroupIntersection\");\n      }\n\n      // verify the required parameter 'testId' is set\n      if (testId === undefined || testId === null) {\n        throw new Error(\"Missing the required parameter 'testId' when calling getClashTestClosedClashGroupIntersection\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId,\n        'testId': testId\n      };\n      let queryParams = {\n        'pageLimit': opts['pageLimit'],\n        'continuationToken': opts['continuationToken']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['oauth2AuthCode'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = ClashGroupClashIntersectionCollection;\n\n      return this.apiClient.callApi(\n        '/v3/containers/{containerId}/tests/{testId}/clashes/closed', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get closed clash group state relative to specified test\n     * This endpoint intersects the closed clash groups stored in the system with the results of the clash test specified in the path. Clashes which were present when the clash group was first defined may now be resolved.\n     * @param {String} containerId Container ID.\n     * @param {String} testId Clash Test ID.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageLimit Page Size.\n     * @param {String} opts.continuationToken Paging continuation token.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClashGroupClashIntersectionCollection}\n     */\n    getClashTestClosedClashGroupIntersection(containerId, testId, opts) {\n      return this.getClashTestClosedClashGroupIntersectionWithHttpInfo(containerId, testId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get closed clash group clash detail (results) batch\n     * This methods intersects the clash groups passed in the body of this method with the clash resources stored for the clash test. This method provides a mechanism for obtaining a sub set of the clash test results for a specific sub-set of clash groups associated with the test.\n     * @param {String} containerId Container ID.\n     * @param {String} testId Clash Test ID.\n     * @param {Object} opts Optional parameters\n     * @param {Array.<String>} opts.requestBody \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ClosedClashGroupClashData>} and HTTP response\n     */\n    getClosedClashGroupDataBatchWithHttpInfo(containerId, testId, opts) {\n      opts = opts || {};\n      let postBody = opts['requestBody'];\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling getClosedClashGroupDataBatch\");\n      }\n\n      // verify the required parameter 'testId' is set\n      if (testId === undefined || testId === null) {\n        throw new Error(\"Missing the required parameter 'testId' when calling getClosedClashGroupDataBatch\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId,\n        'testId': testId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['oauth2AuthCode'];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = [ClosedClashGroupClashData];\n\n      return this.apiClient.callApi(\n        '/v3/containers/{containerId}/tests/{testId}/clashes/closed', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get closed clash group clash detail (results) batch\n     * This methods intersects the clash groups passed in the body of this method with the clash resources stored for the clash test. This method provides a mechanism for obtaining a sub set of the clash test results for a specific sub-set of clash groups associated with the test.\n     * @param {String} containerId Container ID.\n     * @param {String} testId Clash Test ID.\n     * @param {Object} opts Optional parameters\n     * @param {Array.<String>} opts.requestBody \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ClosedClashGroupClashData>}\n     */\n    getClosedClashGroupDataBatch(containerId, testId, opts) {\n      return this.getClosedClashGroupDataBatchWithHttpInfo(containerId, testId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Re-open a closed clash group batch\n     * @param {String} containerId Container ID.\n     * @param {String} modelSetId Model Set Id.\n     * @param {Object} opts Optional parameters\n     * @param {Array.<String>} opts.requestBody \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClashGroupJob} and HTTP response\n     */\n    reopenClosedClashGroupBatchWithHttpInfo(containerId, modelSetId, opts) {\n      opts = opts || {};\n      let postBody = opts['requestBody'];\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling reopenClosedClashGroupBatch\");\n      }\n\n      // verify the required parameter 'modelSetId' is set\n      if (modelSetId === undefined || modelSetId === null) {\n        throw new Error(\"Missing the required parameter 'modelSetId' when calling reopenClosedClashGroupBatch\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId,\n        'modelSetId': modelSetId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['oauth2AuthCode'];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = ClashGroupJob;\n\n      return this.apiClient.callApi(\n        '/v3/containers/{containerId}/modelsets/{modelSetId}/clashes:reopen', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Re-open a closed clash group batch\n     * @param {String} containerId Container ID.\n     * @param {String} modelSetId Model Set Id.\n     * @param {Object} opts Optional parameters\n     * @param {Array.<String>} opts.requestBody \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClashGroupJob}\n     */\n    reopenClosedClashGroupBatch(containerId, modelSetId, opts) {\n      return this.reopenClosedClashGroupBatchWithHttpInfo(containerId, modelSetId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Search closed clash groups in model set\n     * Search all the closed clash groups in the given model set.\n     * @param {String} containerId Container ID.\n     * @param {String} modelSetId Model Set ID.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageLimit Page size.\n     * @param {String} opts.continuationToken Paging continuation token.\n     * @param {String} opts.clashTestId Filter by Clash Test ID.\n     * @param {String} opts.reason Filter by Reason\n     * @param {String} opts.createdBy Filter by Created by\n     * @param {String} opts.after Filter by Created after\n     * @param {String} opts.before Filter by Created before, default UTC now\n     * @param {module:model/SortDirection} opts.sort Defines a sort direction\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClosedClashGroupCollection} and HTTP response\n     */\n    searchContainerModelSetClosedClashGroupsWithHttpInfo(containerId, modelSetId, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling searchContainerModelSetClosedClashGroups\");\n      }\n\n      // verify the required parameter 'modelSetId' is set\n      if (modelSetId === undefined || modelSetId === null) {\n        throw new Error(\"Missing the required parameter 'modelSetId' when calling searchContainerModelSetClosedClashGroups\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId,\n        'modelSetId': modelSetId\n      };\n      let queryParams = {\n        'pageLimit': opts['pageLimit'],\n        'continuationToken': opts['continuationToken'],\n        'clashTestId': opts['clashTestId'],\n        'reason': opts['reason'],\n        'createdBy': opts['createdBy'],\n        'after': opts['after'],\n        'before': opts['before'],\n        'sort': opts['sort']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['oauth2AuthCode'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = ClosedClashGroupCollection;\n\n      return this.apiClient.callApi(\n        '/v3/containers/{containerId}/modelsets/{modelSetId}/clashes/closed', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Search closed clash groups in model set\n     * Search all the closed clash groups in the given model set.\n     * @param {String} containerId Container ID.\n     * @param {String} modelSetId Model Set ID.\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageLimit Page size.\n     * @param {String} opts.continuationToken Paging continuation token.\n     * @param {String} opts.clashTestId Filter by Clash Test ID.\n     * @param {String} opts.reason Filter by Reason\n     * @param {String} opts.createdBy Filter by Created by\n     * @param {String} opts.after Filter by Created after\n     * @param {String} opts.before Filter by Created before, default UTC now\n     * @param {module:model/SortDirection} opts.sort Defines a sort direction\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClosedClashGroupCollection}\n     */\n    searchContainerModelSetClosedClashGroups(containerId, modelSetId, opts) {\n      return this.searchContainerModelSetClosedClashGroupsWithHttpInfo(containerId, modelSetId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"]}