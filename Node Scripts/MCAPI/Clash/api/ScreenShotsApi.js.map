{"version":3,"sources":["../../node_modules/@adsk/bim360-nucleus-clash/src/api/ScreenShotsApi.js"],"names":["ScreenShotsApi","apiClient","ApiClient","instance","containerId","modelSetId","opts","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","ScreenshotToken","callApi","addScreenShotWithHttpInfo","then","response_and_data","data","screenShotId","File","getScreenShotWithHttpInfo"],"mappings":";;;;;;qjBAAA;;;;;;;;;;;;;AAcA;;;;AACA;;;;AACA;;;;;;;;AAEA;;;;;IAKqBA,c;;AAEjB;;;;;;;AAOA,0BAAYC,SAAZ,EAAuB;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,aAAaC,oBAAUC,QAAxC;AACH;;AAID;;;;;;;;;;;;8CAQ0BC,W,EAAaC,U,EAAYC,I,EAAM;AACvDA,aAAOA,QAAQ,EAAf;AACA,UAAIC,WAAWD,KAAK,MAAL,CAAf;;AAEA;AACA,UAAIF,gBAAgBI,SAAhB,IAA6BJ,gBAAgB,IAAjD,EAAuD;AACrD,cAAM,IAAIK,KAAJ,CAAU,yEAAV,CAAN;AACD;;AAED;AACA,UAAIJ,eAAeG,SAAf,IAA4BH,eAAe,IAA/C,EAAqD;AACnD,cAAM,IAAII,KAAJ,CAAU,wEAAV,CAAN;AACD;;AAGD,UAAIC,aAAa;AACf,uBAAeN,WADA;AAEf,sBAAcC;AAFC,OAAjB;AAIA,UAAIM,cAAc,EAAlB;AAEA,UAAIC,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,CAAC,gBAAD,CAAhB;AACA,UAAIC,eAAe,CAAC,WAAD,CAAnB;AACA,UAAIC,UAAU,CAAC,kBAAD,CAAd;AACA,UAAIC,aAAaC,yBAAjB;;AAEA,aAAO,KAAKjB,SAAL,CAAekB,OAAf,CACL,iEADK,EAC8D,MAD9D,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;;;kCAQcb,W,EAAaC,U,EAAYC,I,EAAM;AAC3C,aAAO,KAAKc,yBAAL,CAA+BhB,WAA/B,EAA4CC,UAA5C,EAAwDC,IAAxD,EACJe,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;AAGD;;;;;;;;;;8CAO0BnB,W,EAAaC,U,EAAYmB,Y,EAAc;AAC/D,UAAIjB,WAAW,IAAf;;AAEA;AACA,UAAIH,gBAAgBI,SAAhB,IAA6BJ,gBAAgB,IAAjD,EAAuD;AACrD,cAAM,IAAIK,KAAJ,CAAU,yEAAV,CAAN;AACD;;AAED;AACA,UAAIJ,eAAeG,SAAf,IAA4BH,eAAe,IAA/C,EAAqD;AACnD,cAAM,IAAII,KAAJ,CAAU,wEAAV,CAAN;AACD;;AAED;AACA,UAAIe,iBAAiBhB,SAAjB,IAA8BgB,iBAAiB,IAAnD,EAAyD;AACvD,cAAM,IAAIf,KAAJ,CAAU,0EAAV,CAAN;AACD;;AAGD,UAAIC,aAAa;AACf,uBAAeN,WADA;AAEf,sBAAcC,UAFC;AAGf,wBAAgBmB;AAHD,OAAjB;AAKA,UAAIb,cAAc,EAAlB;AAEA,UAAIC,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,CAAC,gBAAD,CAAhB;AACA,UAAIC,eAAe,EAAnB;AACA,UAAIC,UAAU,CAAC,WAAD,EAAc,kBAAd,CAAd;AACA,UAAIC,aAAaQ,IAAjB;;AAEA,aAAO,KAAKxB,SAAL,CAAekB,OAAf,CACL,gFADK,EAC6E,KAD7E,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;;kCAOcb,W,EAAaC,U,EAAYmB,Y,EAAc;AACnD,aAAO,KAAKE,yBAAL,CAA+BtB,WAA/B,EAA4CC,UAA5C,EAAwDmB,YAAxD,EACJH,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;;;;;kBA3IgBvB,c","file":"ScreenShotsApi.js","sourcesContent":["/**\n * Clash Service\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * OpenAPI spec version: 3.3.12\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport ResourceError from '../model/ResourceError';\nimport ScreenshotToken from '../model/ScreenshotToken';\n\n/**\n* ScreenShots service.\n* @module api/ScreenShotsApi\n* @version 3.3.12\n*/\nexport default class ScreenShotsApi {\n\n    /**\n    * Constructs a new ScreenShotsApi. \n    * @alias module:api/ScreenShotsApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Add Screen Shot\n     * @param {String} containerId Container ID.\n     * @param {String} modelSetId Model Set ID.\n     * @param {Object} opts Optional parameters\n     * @param {File} opts.body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScreenshotToken} and HTTP response\n     */\n    addScreenShotWithHttpInfo(containerId, modelSetId, opts) {\n      opts = opts || {};\n      let postBody = opts['body'];\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling addScreenShot\");\n      }\n\n      // verify the required parameter 'modelSetId' is set\n      if (modelSetId === undefined || modelSetId === null) {\n        throw new Error(\"Missing the required parameter 'modelSetId' when calling addScreenShot\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId,\n        'modelSetId': modelSetId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['oauth2AuthCode'];\n      let contentTypes = ['image/png'];\n      let accepts = ['application/json'];\n      let returnType = ScreenshotToken;\n\n      return this.apiClient.callApi(\n        '/v3/containers/{containerId}/modelsets/{modelSetId}/screenshots', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Add Screen Shot\n     * @param {String} containerId Container ID.\n     * @param {String} modelSetId Model Set ID.\n     * @param {Object} opts Optional parameters\n     * @param {File} opts.body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ScreenshotToken}\n     */\n    addScreenShot(containerId, modelSetId, opts) {\n      return this.addScreenShotWithHttpInfo(containerId, modelSetId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get Screen Shot\n     * @param {String} containerId Container ID.\n     * @param {String} modelSetId Model Set ID.\n     * @param {String} screenShotId Screen shot ID.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response\n     */\n    getScreenShotWithHttpInfo(containerId, modelSetId, screenShotId) {\n      let postBody = null;\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling getScreenShot\");\n      }\n\n      // verify the required parameter 'modelSetId' is set\n      if (modelSetId === undefined || modelSetId === null) {\n        throw new Error(\"Missing the required parameter 'modelSetId' when calling getScreenShot\");\n      }\n\n      // verify the required parameter 'screenShotId' is set\n      if (screenShotId === undefined || screenShotId === null) {\n        throw new Error(\"Missing the required parameter 'screenShotId' when calling getScreenShot\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId,\n        'modelSetId': modelSetId,\n        'screenShotId': screenShotId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['oauth2AuthCode'];\n      let contentTypes = [];\n      let accepts = ['image/png', 'application/json'];\n      let returnType = File;\n\n      return this.apiClient.callApi(\n        '/v3/containers/{containerId}/modelsets/{modelSetId}/screenshots/{screenShotId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get Screen Shot\n     * @param {String} containerId Container ID.\n     * @param {String} modelSetId Model Set ID.\n     * @param {String} screenShotId Screen shot ID.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}\n     */\n    getScreenShot(containerId, modelSetId, screenShotId) {\n      return this.getScreenShotWithHttpInfo(containerId, modelSetId, screenShotId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"]}