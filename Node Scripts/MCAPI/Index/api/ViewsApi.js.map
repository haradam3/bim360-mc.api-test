{"version":3,"sources":["../../node_modules/@adsk/bim360-nucleus-index/src/api/ViewsApi.js"],"names":["ViewsApi","apiClient","ApiClient","instance","containerId","opts","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","IndexViewJob","callApi","createIndexViewWithHttpInfo","then","response_and_data","data","viewId","deleteIndexViewByIdWithHttpInfo","IndexView","getIndexViewByIdWithHttpInfo","IndexViewCollection","getIndexViewsWithHttpInfo","modelSetId","jobId","getModelSetViewJobWithHttpInfo","updateIndexViewByIdWithHttpInfo"],"mappings":"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","file":"ViewsApi.js","sourcesContent":["/**\n * Nucleus Model Set Index API\n * BIM 360 Indexing Service\n *\n * OpenAPI spec version: 1.2.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport BasicError from '../model/BasicError';\nimport IndexView from '../model/IndexView';\nimport IndexViewCollection from '../model/IndexViewCollection';\nimport IndexViewJob from '../model/IndexViewJob';\nimport NewIndexView from '../model/NewIndexView';\n\n/**\n* Views service.\n* @module api/ViewsApi\n* @version 1.2.0\n*/\nexport default class ViewsApi {\n\n    /**\n    * Constructs a new ViewsApi. \n    * @alias module:api/ViewsApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Add index view\n     * Adds a view to a container. This view will be applied to newly created indexes\n     * @param {String} containerId The container.\n     * @param {Object} opts Optional parameters\n     * @param {module:model/NewIndexView} opts.newIndexView \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexViewJob} and HTTP response\n     */\n    createIndexViewWithHttpInfo(containerId, opts) {\n      opts = opts || {};\n      let postBody = opts['newIndexView'];\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling createIndexView\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = IndexViewJob;\n\n      return this.apiClient.callApi(\n        '/v1/containers/{containerId}/views', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Add index view\n     * Adds a view to a container. This view will be applied to newly created indexes\n     * @param {String} containerId The container.\n     * @param {Object} opts Optional parameters\n     * @param {module:model/NewIndexView} opts.newIndexView \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IndexViewJob}\n     */\n    createIndexView(containerId, opts) {\n      return this.createIndexViewWithHttpInfo(containerId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Delete a specific index view\n     * Delete a specific index view\n     * @param {String} containerId The container.\n     * @param {String} viewId The view.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexViewJob} and HTTP response\n     */\n    deleteIndexViewByIdWithHttpInfo(containerId, viewId) {\n      let postBody = null;\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling deleteIndexViewById\");\n      }\n\n      // verify the required parameter 'viewId' is set\n      if (viewId === undefined || viewId === null) {\n        throw new Error(\"Missing the required parameter 'viewId' when calling deleteIndexViewById\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId,\n        'viewId': viewId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = IndexViewJob;\n\n      return this.apiClient.callApi(\n        '/v1/containers/{containerId}/views/{viewId}', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Delete a specific index view\n     * Delete a specific index view\n     * @param {String} containerId The container.\n     * @param {String} viewId The view.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IndexViewJob}\n     */\n    deleteIndexViewById(containerId, viewId) {\n      return this.deleteIndexViewByIdWithHttpInfo(containerId, viewId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get a specific index view\n     * Get a specific index view\n     * @param {String} containerId The container.\n     * @param {String} viewId The view.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexView} and HTTP response\n     */\n    getIndexViewByIdWithHttpInfo(containerId, viewId) {\n      let postBody = null;\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling getIndexViewById\");\n      }\n\n      // verify the required parameter 'viewId' is set\n      if (viewId === undefined || viewId === null) {\n        throw new Error(\"Missing the required parameter 'viewId' when calling getIndexViewById\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId,\n        'viewId': viewId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = IndexView;\n\n      return this.apiClient.callApi(\n        '/v1/containers/{containerId}/views/{viewId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get a specific index view\n     * Get a specific index view\n     * @param {String} containerId The container.\n     * @param {String} viewId The view.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IndexView}\n     */\n    getIndexViewById(containerId, viewId) {\n      return this.getIndexViewByIdWithHttpInfo(containerId, viewId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get index views\n     * Page through defined index views\n     * @param {String} containerId The container.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.createdBy The owner.\n     * @param {Date} opts.after Last modified (created) after.\n     * @param {Date} opts.before Last modified (created) before.\n     * @param {Number} opts.pageLimit The maximum number of views in a page. If not specified the default page limit is used, this value is reserved by the server.\n     * @param {String} opts.continuationToken The token indicating the start of the page, otherwise the first page will be retrieved.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexViewCollection} and HTTP response\n     */\n    getIndexViewsWithHttpInfo(containerId, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling getIndexViews\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId\n      };\n      let queryParams = {\n        'createdBy': opts['createdBy'],\n        'after': opts['after'],\n        'before': opts['before'],\n        'pageLimit': opts['pageLimit'],\n        'continuationToken': opts['continuationToken']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = IndexViewCollection;\n\n      return this.apiClient.callApi(\n        '/v1/containers/{containerId}/views', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get index views\n     * Page through defined index views\n     * @param {String} containerId The container.\n     * @param {Object} opts Optional parameters\n     * @param {String} opts.createdBy The owner.\n     * @param {Date} opts.after Last modified (created) after.\n     * @param {Date} opts.before Last modified (created) before.\n     * @param {Number} opts.pageLimit The maximum number of views in a page. If not specified the default page limit is used, this value is reserved by the server.\n     * @param {String} opts.continuationToken The token indicating the start of the page, otherwise the first page will be retrieved.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IndexViewCollection}\n     */\n    getIndexViews(containerId, opts) {\n      return this.getIndexViewsWithHttpInfo(containerId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get model set index job\n     * Get model set index job\n     * @param {String} containerId Container Id\n     * @param {String} modelSetId The model set.\n     * @param {String} jobId Transaciton Id\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexViewJob} and HTTP response\n     */\n    getModelSetViewJobWithHttpInfo(containerId, modelSetId, jobId) {\n      let postBody = null;\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling getModelSetViewJob\");\n      }\n\n      // verify the required parameter 'modelSetId' is set\n      if (modelSetId === undefined || modelSetId === null) {\n        throw new Error(\"Missing the required parameter 'modelSetId' when calling getModelSetViewJob\");\n      }\n\n      // verify the required parameter 'jobId' is set\n      if (jobId === undefined || jobId === null) {\n        throw new Error(\"Missing the required parameter 'jobId' when calling getModelSetViewJob\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId,\n        'modelSetId': modelSetId,\n        'jobId': jobId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = IndexViewJob;\n\n      return this.apiClient.callApi(\n        '/v1/containers/{containerId}/views/jobs/{jobId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get model set index job\n     * Get model set index job\n     * @param {String} containerId Container Id\n     * @param {String} modelSetId The model set.\n     * @param {String} jobId Transaciton Id\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IndexViewJob}\n     */\n    getModelSetViewJob(containerId, modelSetId, jobId) {\n      return this.getModelSetViewJobWithHttpInfo(containerId, modelSetId, jobId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Update a specific index view\n     * Update a specific index view\n     * @param {String} containerId The container.\n     * @param {String} viewId The view.\n     * @param {Object} opts Optional parameters\n     * @param {module:model/NewIndexView} opts.newIndexView \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexViewJob} and HTTP response\n     */\n    updateIndexViewByIdWithHttpInfo(containerId, viewId, opts) {\n      opts = opts || {};\n      let postBody = opts['newIndexView'];\n\n      // verify the required parameter 'containerId' is set\n      if (containerId === undefined || containerId === null) {\n        throw new Error(\"Missing the required parameter 'containerId' when calling updateIndexViewById\");\n      }\n\n      // verify the required parameter 'viewId' is set\n      if (viewId === undefined || viewId === null) {\n        throw new Error(\"Missing the required parameter 'viewId' when calling updateIndexViewById\");\n      }\n\n\n      let pathParams = {\n        'containerId': containerId,\n        'viewId': viewId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = IndexViewJob;\n\n      return this.apiClient.callApi(\n        '/v1/containers/{containerId}/views/{viewId}', 'PATCH',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Update a specific index view\n     * Update a specific index view\n     * @param {String} containerId The container.\n     * @param {String} viewId The view.\n     * @param {Object} opts Optional parameters\n     * @param {module:model/NewIndexView} opts.newIndexView \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IndexViewJob}\n     */\n    updateIndexViewById(containerId, viewId, opts) {\n      return this.updateIndexViewByIdWithHttpInfo(containerId, viewId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"]}