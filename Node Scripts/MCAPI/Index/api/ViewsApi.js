'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
ucleus Model Set Index API
ndexing Service

penAPI spec version: 1.2.0


his class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
o not edit the class manually.



var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _BasicError = require('../model/BasicError');

var _BasicError2 = _interopRequireDefault(_BasicError);

var _IndexView = require('../model/IndexView');

var _IndexView2 = _interopRequireDefault(_IndexView);

var _IndexViewCollection = require('../model/IndexViewCollection');

var _IndexViewCollection2 = _interopRequireDefault(_IndexViewCollection);

var _IndexViewJob = require('../model/IndexViewJob');

var _IndexViewJob2 = _interopRequireDefault(_IndexViewJob);

var _NewIndexView = require('../model/NewIndexView');

var _NewIndexView2 = _interopRequireDefault(_NewIndexView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Views service.
* @module api/ViewsApi
* @version 1.2.0
*/
var ViewsApi = function () {

  /**
  * Constructs a new ViewsApi. 
  * @alias module:api/ViewsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ViewsApi(apiClient) {
    _classCallCheck(this, ViewsApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * Add index view
   * Adds a view to a container. This view will be applied to newly created indexes
   * @param {String} containerId The container.
   * @param {Object} opts Optional parameters
   * @param {module:model/NewIndexView} opts.newIndexView 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexViewJob} and HTTP response
   */


  _createClass(ViewsApi, [{
    key: 'createIndexViewWithHttpInfo',
    value: function createIndexViewWithHttpInfo(containerId, opts) {
      opts = opts || {};
      var postBody = opts['newIndexView'];

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling createIndexView");
      }

      var pathParams = {
        'containerId': containerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth2AuthCode'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _IndexViewJob2.default;

      return this.apiClient.callApi('/v1/containers/{containerId}/views', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Add index view
     * Adds a view to a container. This view will be applied to newly created indexes
     * @param {String} containerId The container.
     * @param {Object} opts Optional parameters
     * @param {module:model/NewIndexView} opts.newIndexView 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IndexViewJob}
     */

  }, {
    key: 'createIndexView',
    value: function createIndexView(containerId, opts) {
      return this.createIndexViewWithHttpInfo(containerId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete a specific index view
     * Delete a specific index view
     * @param {String} containerId The container.
     * @param {String} viewId The view.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexViewJob} and HTTP response
     */

  }, {
    key: 'deleteIndexViewByIdWithHttpInfo',
    value: function deleteIndexViewByIdWithHttpInfo(containerId, viewId) {
      var postBody = null;

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling deleteIndexViewById");
      }

      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling deleteIndexViewById");
      }

      var pathParams = {
        'containerId': containerId,
        'viewId': viewId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _IndexViewJob2.default;

      return this.apiClient.callApi('/v1/containers/{containerId}/views/{viewId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Delete a specific index view
     * Delete a specific index view
     * @param {String} containerId The container.
     * @param {String} viewId The view.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IndexViewJob}
     */

  }, {
    key: 'deleteIndexViewById',
    value: function deleteIndexViewById(containerId, viewId) {
      return this.deleteIndexViewByIdWithHttpInfo(containerId, viewId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get a specific index view
     * Get a specific index view
     * @param {String} containerId The container.
     * @param {String} viewId The view.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexView} and HTTP response
     */

  }, {
    key: 'getIndexViewByIdWithHttpInfo',
    value: function getIndexViewByIdWithHttpInfo(containerId, viewId) {
      var postBody = null;

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling getIndexViewById");
      }

      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling getIndexViewById");
      }

      var pathParams = {
        'containerId': containerId,
        'viewId': viewId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _IndexView2.default;

      return this.apiClient.callApi('/v1/containers/{containerId}/views/{viewId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get a specific index view
     * Get a specific index view
     * @param {String} containerId The container.
     * @param {String} viewId The view.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IndexView}
     */

  }, {
    key: 'getIndexViewById',
    value: function getIndexViewById(containerId, viewId) {
      return this.getIndexViewByIdWithHttpInfo(containerId, viewId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get index views
     * Page through defined index views
     * @param {String} containerId The container.
     * @param {Object} opts Optional parameters
     * @param {String} opts.createdBy The owner.
     * @param {Date} opts.after Last modified (created) after.
     * @param {Date} opts.before Last modified (created) before.
     * @param {Number} opts.pageLimit The maximum number of views in a page. If not specified the default page limit is used, this value is reserved by the server.
     * @param {String} opts.continuationToken The token indicating the start of the page, otherwise the first page will be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexViewCollection} and HTTP response
     */

  }, {
    key: 'getIndexViewsWithHttpInfo',
    value: function getIndexViewsWithHttpInfo(containerId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling getIndexViews");
      }

      var pathParams = {
        'containerId': containerId
      };
      var queryParams = {
        'createdBy': opts['createdBy'],
        'after': opts['after'],
        'before': opts['before'],
        'pageLimit': opts['pageLimit'],
        'continuationToken': opts['continuationToken']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _IndexViewCollection2.default;

      return this.apiClient.callApi('/v1/containers/{containerId}/views', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get index views
     * Page through defined index views
     * @param {String} containerId The container.
     * @param {Object} opts Optional parameters
     * @param {String} opts.createdBy The owner.
     * @param {Date} opts.after Last modified (created) after.
     * @param {Date} opts.before Last modified (created) before.
     * @param {Number} opts.pageLimit The maximum number of views in a page. If not specified the default page limit is used, this value is reserved by the server.
     * @param {String} opts.continuationToken The token indicating the start of the page, otherwise the first page will be retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IndexViewCollection}
     */

  }, {
    key: 'getIndexViews',
    value: function getIndexViews(containerId, opts) {
      return this.getIndexViewsWithHttpInfo(containerId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get model set index job
     * Get model set index job
     * @param {String} containerId Container Id
     * @param {String} modelSetId The model set.
     * @param {String} jobId Transaciton Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexViewJob} and HTTP response
     */

  }, {
    key: 'getModelSetViewJobWithHttpInfo',
    value: function getModelSetViewJobWithHttpInfo(containerId, modelSetId, jobId) {
      var postBody = null;

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling getModelSetViewJob");
      }

      // verify the required parameter 'modelSetId' is set
      if (modelSetId === undefined || modelSetId === null) {
        throw new Error("Missing the required parameter 'modelSetId' when calling getModelSetViewJob");
      }

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getModelSetViewJob");
      }

      var pathParams = {
        'containerId': containerId,
        'modelSetId': modelSetId,
        'jobId': jobId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _IndexViewJob2.default;

      return this.apiClient.callApi('/v1/containers/{containerId}/views/jobs/{jobId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get model set index job
     * Get model set index job
     * @param {String} containerId Container Id
     * @param {String} modelSetId The model set.
     * @param {String} jobId Transaciton Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IndexViewJob}
     */

  }, {
    key: 'getModelSetViewJob',
    value: function getModelSetViewJob(containerId, modelSetId, jobId) {
      return this.getModelSetViewJobWithHttpInfo(containerId, modelSetId, jobId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update a specific index view
     * Update a specific index view
     * @param {String} containerId The container.
     * @param {String} viewId The view.
     * @param {Object} opts Optional parameters
     * @param {module:model/NewIndexView} opts.newIndexView 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexViewJob} and HTTP response
     */

  }, {
    key: 'updateIndexViewByIdWithHttpInfo',
    value: function updateIndexViewByIdWithHttpInfo(containerId, viewId, opts) {
      opts = opts || {};
      var postBody = opts['newIndexView'];

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling updateIndexViewById");
      }

      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling updateIndexViewById");
      }

      var pathParams = {
        'containerId': containerId,
        'viewId': viewId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _IndexViewJob2.default;

      return this.apiClient.callApi('/v1/containers/{containerId}/views/{viewId}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update a specific index view
     * Update a specific index view
     * @param {String} containerId The container.
     * @param {String} viewId The view.
     * @param {Object} opts Optional parameters
     * @param {module:model/NewIndexView} opts.newIndexView 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IndexViewJob}
     */

  }, {
    key: 'updateIndexViewById',
    value: function updateIndexViewById(containerId, viewId, opts) {
      return this.updateIndexViewByIdWithHttpInfo(containerId, viewId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return ViewsApi;
}();

exports.default = ViewsApi;
//# sourceMappingURL=ViewsApi.js.map