'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
lash Service
o description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

penAPI spec version: 3.3.12

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
o not edit the class manually.



var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ClashTest = require('../model/ClashTest');

var _ClashTest2 = _interopRequireDefault(_ClashTest);

var _ClashTestResourceCollection = require('../model/ClashTestResourceCollection');

var _ClashTestResourceCollection2 = _interopRequireDefault(_ClashTestResourceCollection);

var _ClashTestSummaryCollection = require('../model/ClashTestSummaryCollection');

var _ClashTestSummaryCollection2 = _interopRequireDefault(_ClashTestSummaryCollection);

var _ResourceError = require('../model/ResourceError');

var _ResourceError2 = _interopRequireDefault(_ResourceError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Tests service.
* @module api/TestsApi
* @version 3.3.12
*/
var TestsApi = function () {

  /**
  * Constructs a new TestsApi. 
  * @alias module:api/TestsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function TestsApi(apiClient) {
    _classCallCheck(this, TestsApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * Get clash test by ID
   * Get a specific clash test using its unique GUID.
   * @param {String} containerId Container ID.
   * @param {String} testId Clash Test ID.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClashTest} and HTTP response
   */


  _createClass(TestsApi, [{
    key: 'getClashTestWithHttpInfo',
    value: function getClashTestWithHttpInfo(containerId, testId) {
      var postBody = null;

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling getClashTest");
      }

      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling getClashTest");
      }

      var pathParams = {
        'containerId': containerId,
        'testId': testId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth2AuthCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ClashTest2.default;

      return this.apiClient.callApi('/v3/containers/{containerId}/tests/{testId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get clash test by ID
     * Get a specific clash test using its unique GUID.
     * @param {String} containerId Container ID.
     * @param {String} testId Clash Test ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClashTest}
     */

  }, {
    key: 'getClashTest',
    value: function getClashTest(containerId, testId) {
      return this.getClashTestWithHttpInfo(containerId, testId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get clash test result resources
     * When a clash test against a scope version is successful it produces three file resources which contain the raw clash instances and the documents (models) these clash results pertain to. See accompanying API documentation for details. This endpoint returns the URLs and secure headers necessary to access these resources.
     * @param {String} containerId Container ID.
     * @param {String} testId Clash Test ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClashTestResourceCollection} and HTTP response
     */

  }, {
    key: 'getClashTestResourcesWithHttpInfo',
    value: function getClashTestResourcesWithHttpInfo(containerId, testId) {
      var postBody = null;

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling getClashTestResources");
      }

      // verify the required parameter 'testId' is set
      if (testId === undefined || testId === null) {
        throw new Error("Missing the required parameter 'testId' when calling getClashTestResources");
      }

      var pathParams = {
        'containerId': containerId,
        'testId': testId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth2AuthCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ClashTestResourceCollection2.default;

      return this.apiClient.callApi('/v3/containers/{containerId}/tests/{testId}/resources', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get clash test result resources
     * When a clash test against a scope version is successful it produces three file resources which contain the raw clash instances and the documents (models) these clash results pertain to. See accompanying API documentation for details. This endpoint returns the URLs and secure headers necessary to access these resources.
     * @param {String} containerId Container ID.
     * @param {String} testId Clash Test ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClashTestResourceCollection}
     */

  }, {
    key: 'getClashTestResources',
    value: function getClashTestResources(containerId, testId) {
      return this.getClashTestResourcesWithHttpInfo(containerId, testId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get model set clash test summaries
     * Get the clash tests summaries for ALL the clash tests which have been executed for a given model set. If no tests have yet been completed for the specified model set then no tests will returned.
     * @param {String} containerId Container ID.
     * @param {String} modelSetId Model Set ID.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageLimit Page Size.
     * @param {String} opts.continuationToken Paging continuation token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClashTestSummaryCollection} and HTTP response
     */

  }, {
    key: 'getModelSetClashTestsWithHttpInfo',
    value: function getModelSetClashTestsWithHttpInfo(containerId, modelSetId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling getModelSetClashTests");
      }

      // verify the required parameter 'modelSetId' is set
      if (modelSetId === undefined || modelSetId === null) {
        throw new Error("Missing the required parameter 'modelSetId' when calling getModelSetClashTests");
      }

      var pathParams = {
        'containerId': containerId,
        'modelSetId': modelSetId
      };
      var queryParams = {
        'pageLimit': opts['pageLimit'],
        'continuationToken': opts['continuationToken']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth2AuthCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ClashTestSummaryCollection2.default;

      return this.apiClient.callApi('/v3/containers/{containerId}/modelsets/{modelSetId}/tests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get model set clash test summaries
     * Get the clash tests summaries for ALL the clash tests which have been executed for a given model set. If no tests have yet been completed for the specified model set then no tests will returned.
     * @param {String} containerId Container ID.
     * @param {String} modelSetId Model Set ID.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageLimit Page Size.
     * @param {String} opts.continuationToken Paging continuation token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClashTestSummaryCollection}
     */

  }, {
    key: 'getModelSetClashTests',
    value: function getModelSetClashTests(containerId, modelSetId, opts) {
      return this.getModelSetClashTestsWithHttpInfo(containerId, modelSetId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get model set version clash test Summaries
     * Get all the clash test summaries for the clash tests which have been run against a specific model set version. If no tests have yet been completed for the specified model set then no tests will returned.
     * @param {String} containerId Container ID.
     * @param {String} modelSetId Model Set ID.
     * @param {Number} version Model Set Version.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageLimit Page size.
     * @param {String} opts.continuationToken Paging continuation token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClashTestSummaryCollection} and HTTP response
     */

  }, {
    key: 'getModelSetVersionClashTestsWithHttpInfo',
    value: function getModelSetVersionClashTestsWithHttpInfo(containerId, modelSetId, version, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling getModelSetVersionClashTests");
      }

      // verify the required parameter 'modelSetId' is set
      if (modelSetId === undefined || modelSetId === null) {
        throw new Error("Missing the required parameter 'modelSetId' when calling getModelSetVersionClashTests");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getModelSetVersionClashTests");
      }

      var pathParams = {
        'containerId': containerId,
        'modelSetId': modelSetId,
        'version': version
      };
      var queryParams = {
        'pageLimit': opts['pageLimit'],
        'continuationToken': opts['continuationToken']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth2AuthCode'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ClashTestSummaryCollection2.default;

      return this.apiClient.callApi('/v3/containers/{containerId}/modelsets/{modelSetId}/versions/{version}/tests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get model set version clash test Summaries
     * Get all the clash test summaries for the clash tests which have been run against a specific model set version. If no tests have yet been completed for the specified model set then no tests will returned.
     * @param {String} containerId Container ID.
     * @param {String} modelSetId Model Set ID.
     * @param {Number} version Model Set Version.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageLimit Page size.
     * @param {String} opts.continuationToken Paging continuation token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClashTestSummaryCollection}
     */

  }, {
    key: 'getModelSetVersionClashTests',
    value: function getModelSetVersionClashTests(containerId, modelSetId, version, opts) {
      return this.getModelSetVersionClashTestsWithHttpInfo(containerId, modelSetId, version, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return TestsApi;
}();

exports.default = TestsApi;
//# sourceMappingURL=TestsApi.js.map